What happens when you initialize a repository? Why do you need to do it?
- the .git file is created with meta data
- allows the ability to commit files and initiate tracking

How is the staging area different from the working directory and the repository? What value do you think it offers?
- it is the in-between. It allows grouping of files to be committed together.

How can you use the staging area to make sure you have one commit per logical change?
- can diff --staged to see what was changed since last commit

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- if you want to try to redesign code, refactor code, or add an experiemental feature. Branches would allow easy access to the pre-branched code.

How do the diagrams help you visualize the branch structure?
- can see what is reachable

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
- all changes in the branches are merged into one code base and each commit in the branches is in the log for the merged branch

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
- saves time/energy/errors when there are no conflicts; does not auto merge when conflict to avoid strange error-inducing automatic conflict resolution